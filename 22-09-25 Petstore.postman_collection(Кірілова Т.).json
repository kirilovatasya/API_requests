{
	"info": {
		"_postman_id": "b03116fd-7625-4204-8694-a26712493644",
		"name": "22/09/25 Petstore",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47932731"
	},
	"item": [
		{
			"name": "200ok add a new pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check pet ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(333);\r",
							"});\r",
							"\r",
							"pm.test(\"Check pet category\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.category.id).to.eql(0);\r",
							"    pm.expect(jsonData.category.name).to.eql(\"Cat\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check pet name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Bonka\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check pet photoUrls\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.photoUrls[0]).to.eql(\"string\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check pet tags\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.tags[0].id).to.eql(0);\r",
							"    pm.expect(jsonData.tags[0].name).to.eql(\"string\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check pet status\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"available\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 333,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"Cat\"\r\n  },\r\n  \"name\": \"Bonka\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "200ok find pet by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check pet ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(333);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check pet category\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.category.id).to.eql(0);\r",
							"    pm.expect(jsonData.category.name).to.eql(\"Cat\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check pet name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Bonka\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check pet photoUrls\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.photoUrls[0]).to.eql(\"string\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check pet tags\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.tags[0].id).to.eql(0);\r",
							"    pm.expect(jsonData.tags[0].name).to.eql(\"string\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check pet status\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"available\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/333",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"333"
					]
				}
			},
			"response": []
		},
		{
			"name": "200 find pet by status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check pet status\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].status).to.eql(\"available\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/findByStatus?status=available",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"findByStatus"
					],
					"query": [
						{
							"key": "status",
							"value": "available"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "400(F)find pet by status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"// не можна отримати помилку 400 Invalid status value тому, що сам запит про статус пета (коли з запит вписати статус пета який є невалідним, наприклад status=test) не видає помилку. Натомість маємо 200ок замість 400 Invalid status value"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "// не можна отримати помилку 400 Invalid status value тому, що сам запит про статус пета (коли з запит вписати статус пета який є невалідним, наприклад status=test) не видає помилку. Натомість маємо 200ок замість 400 Invalid status value",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/findByStatus?status=test",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"findByStatus"
					],
					"query": [
						{
							"key": "status",
							"value": "test"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "404 find pet by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Check error message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Pet not found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/99999999999999",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"99999999999999"
					]
				}
			},
			"response": []
		},
		{
			"name": "400 update un existing pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": 99999999999999,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"name\": \"doggie\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"available\"\r\n}\r\n\r\n\r\n//в цьому запиті неможливо отримати помилку 404 Pet not found тому, що поле id містить баг(повинно видати помилку, але маємо код 200ок). Бо пета з таким id я використовувала для перевірки 404 find pet by ID і вона спрацювала вірно показавши результат, що такого пета не існує  Pet \"message\": \"Pet not found\" ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "200ok update un existing pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check pet ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(333);\r",
							"});\r",
							"\r",
							"pm.test(\"Check pet category\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.category.id).to.eql(0);\r",
							"    pm.expect(jsonData.category.name).to.eql(\"cat\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check pet name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"Bonka\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check pet photoUrls\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.photoUrls[0]).to.eql(\"string\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check pet tags\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.tags[0].id).to.eql(0);\r",
							"    pm.expect(jsonData.tags[0].name).to.eql(\"string\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check pet status\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"sold\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\":333,\r\n  \"category\": {\r\n    \"id\": 0,\r\n    \"name\": \"cat\"\r\n  },\r\n  \"name\": \"Bonka\",\r\n  \"photoUrls\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": 0,\r\n      \"name\": \"string\"\r\n    }\r\n  ],\r\n  \"status\": \"sold\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet"
					]
				}
			},
			"response": []
		},
		{
			"name": "400 delete a pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/99999999999",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"99999999999"
					]
				}
			},
			"response": []
		},
		{
			"name": "200ok delete a pet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check message\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"123654\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check type\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"unknown\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://petstore.swagger.io/v2/pet/123654",
					"protocol": "https",
					"host": [
						"petstore",
						"swagger",
						"io"
					],
					"path": [
						"v2",
						"pet",
						"123654"
					]
				}
			},
			"response": []
		}
	]
}